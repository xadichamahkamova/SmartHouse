// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: proto/command.proto

package commandpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CommandService_CreateCommand_FullMethodName = "/CommandService/CreateCommand"
	CommandService_GetCommand_FullMethodName    = "/CommandService/GetCommand"
	CommandService_ListOfCommand_FullMethodName = "/CommandService/ListOfCommand"
	CommandService_UpdateCommand_FullMethodName = "/CommandService/UpdateCommand"
	CommandService_DeleteCommand_FullMethodName = "/CommandService/DeleteCommand"
)

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	CreateCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*ResponseOfCommand, error)
	GetCommand(ctx context.Context, in *SingleId, opts ...grpc.CallOption) (*Command, error)
	ListOfCommand(ctx context.Context, in *ListRequestOfCommand, opts ...grpc.CallOption) (*ListResponseOfCommand, error)
	UpdateCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*ResponseOfCommand, error)
	DeleteCommand(ctx context.Context, in *SingleId, opts ...grpc.CallOption) (*ResponseOfCommand, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) CreateCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*ResponseOfCommand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseOfCommand)
	err := c.cc.Invoke(ctx, CommandService_CreateCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) GetCommand(ctx context.Context, in *SingleId, opts ...grpc.CallOption) (*Command, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Command)
	err := c.cc.Invoke(ctx, CommandService_GetCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) ListOfCommand(ctx context.Context, in *ListRequestOfCommand, opts ...grpc.CallOption) (*ListResponseOfCommand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponseOfCommand)
	err := c.cc.Invoke(ctx, CommandService_ListOfCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) UpdateCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*ResponseOfCommand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseOfCommand)
	err := c.cc.Invoke(ctx, CommandService_UpdateCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) DeleteCommand(ctx context.Context, in *SingleId, opts ...grpc.CallOption) (*ResponseOfCommand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseOfCommand)
	err := c.cc.Invoke(ctx, CommandService_DeleteCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations must embed UnimplementedCommandServiceServer
// for forward compatibility
type CommandServiceServer interface {
	CreateCommand(context.Context, *Command) (*ResponseOfCommand, error)
	GetCommand(context.Context, *SingleId) (*Command, error)
	ListOfCommand(context.Context, *ListRequestOfCommand) (*ListResponseOfCommand, error)
	UpdateCommand(context.Context, *Command) (*ResponseOfCommand, error)
	DeleteCommand(context.Context, *SingleId) (*ResponseOfCommand, error)
	mustEmbedUnimplementedCommandServiceServer()
}

// UnimplementedCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (UnimplementedCommandServiceServer) CreateCommand(context.Context, *Command) (*ResponseOfCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommand not implemented")
}
func (UnimplementedCommandServiceServer) GetCommand(context.Context, *SingleId) (*Command, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommand not implemented")
}
func (UnimplementedCommandServiceServer) ListOfCommand(context.Context, *ListRequestOfCommand) (*ListResponseOfCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOfCommand not implemented")
}
func (UnimplementedCommandServiceServer) UpdateCommand(context.Context, *Command) (*ResponseOfCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommand not implemented")
}
func (UnimplementedCommandServiceServer) DeleteCommand(context.Context, *SingleId) (*ResponseOfCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommand not implemented")
}
func (UnimplementedCommandServiceServer) mustEmbedUnimplementedCommandServiceServer() {}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_CreateCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).CreateCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_CreateCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).CreateCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_GetCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).GetCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_GetCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).GetCommand(ctx, req.(*SingleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_ListOfCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestOfCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).ListOfCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_ListOfCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).ListOfCommand(ctx, req.(*ListRequestOfCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_UpdateCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).UpdateCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_UpdateCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).UpdateCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_DeleteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).DeleteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandService_DeleteCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).DeleteCommand(ctx, req.(*SingleId))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommand",
			Handler:    _CommandService_CreateCommand_Handler,
		},
		{
			MethodName: "GetCommand",
			Handler:    _CommandService_GetCommand_Handler,
		},
		{
			MethodName: "ListOfCommand",
			Handler:    _CommandService_ListOfCommand_Handler,
		},
		{
			MethodName: "UpdateCommand",
			Handler:    _CommandService_UpdateCommand_Handler,
		},
		{
			MethodName: "DeleteCommand",
			Handler:    _CommandService_DeleteCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/command.proto",
}
